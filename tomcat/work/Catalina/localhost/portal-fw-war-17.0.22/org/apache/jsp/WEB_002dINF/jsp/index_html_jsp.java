/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.82
 * Generated at: 2018-04-23 12:43:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_html_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${doctype}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\n");
      out.write("<html ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${xmlns}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write(">\n");
      out.write("<head>\n");
      out.write("<meta name=\"viewport\" content=\"user-scalable=no\" />\n");
      out.write("<title>IPTV Portal</title>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("/* <![CDATA[ */  \n");
      out.write("(function() {             \n");
      out.write("\twindow.init_parameters = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${initParameters}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write(";\n");
      out.write("\tvar coreModulesCount = 0, json;\n");
      out.write("\n");
      out.write("    var fw = {\n");
      out.write("\t    overloadRetryAttempts: 0,\n");
      out.write("\t    inWidget: (window.location.protocol.replace(\":\", \"\") === \"widget\"),\n");
      out.write("\t    getReloadTime: function(req) {\n");
      out.write("\t        var _this = this;\n");
      out.write("\t        function calculateReloadTime() {\n");
      out.write("\t            // multiplied by 2^retryAttempts for backoff, default start at 2s\n");
      out.write("\t            var t = Math.pow(2, ++_this.overloadRetryAttempts);\n");
      out.write("\t            return 1000 * Math.min(1024, Math.random() * t + t) / 2; // time randomized between (0.5 - 1.0)*t\n");
      out.write("\t        }\n");
      out.write("\t\n");
      out.write("\t        if (!req) { // HTTP timeout\n");
      out.write("\t            return calculateReloadTime();\n");
      out.write("\t        } else if (req.status === 0) {\n");
      out.write("\t            return 10000;\n");
      out.write("\t        } else if (req.status === 503) {\n");
      out.write("\t            var retryAfter = req.getResponseHeader(\"Retry-After\") || 1;\n");
      out.write("\t            return retryAfter * calculateReloadTime();\n");
      out.write("\t        } else {\n");
      out.write("\t            return calculateReloadTime();\n");
      out.write("\t        }\n");
      out.write("\t    },\n");
      out.write("\t    httpGet: function(url, success, failure) {\n");
      out.write("\t        var req = new XMLHttpRequest();\n");
      out.write("\t        if (req) {\n");
      out.write("\t            req.onreadystatechange = function() {\n");
      out.write("\t                if (req.readyState == 4) {\n");
      out.write("\t                    req.onreadystatechange = undefined;\n");
      out.write("\t                    if (req.status == 200 || (fw.inWidget && req.status === 0)) {\n");
      out.write("\t                        success(req.responseText);\n");
      out.write("\t                    } else {\n");
      out.write("\t                        failure(req);\n");
      out.write("\t                    }\n");
      out.write("\t                    req = undefined;\n");
      out.write("\t                }\n");
      out.write("\t            };\n");
      out.write("\t            req.open(\"GET\", url, true);\n");
      out.write("\t            req.send(null);\n");
      out.write("\t        }\n");
      out.write("\t    },\n");
      out.write("\t    restartMsg: undefined\n");
      out.write("\t};\n");
      out.write("\t\n");
      out.write("\tfunction bootFailure(location, req) {\n");
      out.write("\t    var time = fw.getReloadTime(req);\n");
      out.write("\t    setTimeout(function() {\n");
      out.write("\t        --coreModulesCount;\n");
      out.write("\t        fw.restartMsg.hide();\n");
      out.write("\t        loadCoreModule(location);\n");
      out.write("\t    }, time);\n");
      out.write("\t    fw.restartMsg.show(time);\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\tfunction loadCoreModule(location) {\n");
      out.write("\t    coreModulesCount++;\n");
      out.write("\t    fw.httpGet(location, function(str) {\n");
      out.write("\t        try {\n");
      out.write("\t            eval(\"json=\" + str);\n");
      out.write("\t            if (--coreModulesCount === 0) {\n");
      out.write("\t                loadIptvPortal(fw);\n");
      out.write("\t            }\n");
      out.write("\t        } catch (e) {\n");
      out.write("\t            if (window.console && window.console.log) {\n");
      out.write("\t                window.console.log(\"Unable to parse module from location \" + location + \" \" + e);\n");
      out.write("\t            }\n");
      out.write("\t        }\n");
      out.write("\t    }, function(req) {\n");
      out.write("\t        bootFailure(location, req);\n");
      out.write("\t    });\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\tfunction RMsg() {\n");
      out.write("\t    var timer;\n");
      out.write("\t    var restartMsgNode = document.getElementById(\"restartMsg\");\n");
      out.write("\t    var loadErrorMsgSpan = document.getElementById(\"loadErrorMsg\");\n");
      out.write("\t    var restartNowMsgSpan = document.getElementById(\"restartNowMsg\");\n");
      out.write("\t    var loadErrorMsgText = loadErrorMsgSpan && loadErrorMsgSpan.innerHTML ? loadErrorMsgSpan.innerHTML : undefined;\n");
      out.write("\t\n");
      out.write("\t    this.show = function(reloadTime) {\n");
      out.write("\t        if (timer) {\n");
      out.write("\t            timer = clearInterval(timer);\n");
      out.write("\t        }\n");
      out.write("\t\n");
      out.write("\t        if (restartMsgNode) {\n");
      out.write("\t            restartMsgNode.style.display = \"block\";\n");
      out.write("\t            if(loadErrorMsgText){\n");
      out.write("\t                var count = reloadTime ? Math.floor(reloadTime / 1000) : 10;\n");
      out.write("\t                function display() {\n");
      out.write("\t                    if (count == 1) {\n");
      out.write("\t                        loadErrorMsgSpan.style.display = \"none\";\n");
      out.write("\t                        restartNowMsgSpan.style.display = \"block\";\n");
      out.write("\t                        timer = clearInterval(timer);\n");
      out.write("\t                    } else {\n");
      out.write("\t                        loadErrorMsgSpan.innerHTML = loadErrorMsgText.replace(\"%d\", count);\n");
      out.write("\t                        loadErrorMsgSpan.style.display = \"block\";\n");
      out.write("\t                        restartNowMsgSpan.style.display = \"none\";\n");
      out.write("\t                    }\n");
      out.write("\t                    count--;\n");
      out.write("\t                }\n");
      out.write("\t                display();\n");
      out.write("\t                if (count > 1) {\n");
      out.write("\t                    timer = setInterval(display, 1000);\n");
      out.write("\t                }         \n");
      out.write("\t            }\n");
      out.write("\t        }\n");
      out.write("\t    };\n");
      out.write("\t    this.hide = function() {\n");
      out.write("\t        if (restartMsgNode) {\n");
      out.write("\t            restartMsgNode.style.display = \"none\";\n");
      out.write("\t            timer = clearInterval(timer);\n");
      out.write("\t        }\n");
      out.write("\t    };\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\twindow.onload = function() {\n");
      out.write("\t    window.onload = undefined;\n");
      out.write("\t    fw.restartMsg = new RMsg();\n");
      out.write("\t\t");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("\t};\n");
      out.write("}());\n");
      out.write("/* ]]> */\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body id=\"main\" style=\"background-color:#010101\">\n");
      if (_jspx_meth_c_005fforEach_005f1(_jspx_page_context))
        return;
      out.write("\n");
      out.write("<div id=\"ViewManager\">\n");
      out.write("    <div id=\"desktop\"></div>\n");
      out.write("    <div id=\"planes\">\n");
      out.write("      <div id=\"plane\"></div>\n");
      out.write("    </div>\n");
      out.write("    <div id=\"onTop\">\n");
      out.write("      <div id=\"plane\"></div>\n");
      out.write("    </div>\n");
      out.write("  </div>\n");
      out.write("  <div id=\"ajaxActivity\"></div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/jsp/index.html.jsp(130,2) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("url");
      // /WEB-INF/jsp/index.html.jsp(130,2) name = items type = java.lang.Object reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${scripts}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("loadCoreModule(\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${url}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
            out.write("\");\n");
            out.write("\t\t");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f1 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f1_reused = false;
    try {
      _jspx_th_c_005fforEach_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f1.setParent(null);
      // /WEB-INF/jsp/index.html.jsp(140,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setVar("m");
      // /WEB-INF/jsp/index.html.jsp(140,0) name = items type = java.lang.Object reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setItems((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${markups}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      int[] _jspx_push_body_count_c_005fforEach_005f1 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f1 = _jspx_th_c_005fforEach_005f1.doStartTag();
        if (_jspx_eval_c_005fforEach_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\n");
            out.write("    ");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
            out.write('\n');
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f1.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f1[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f1.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f1.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f1);
      _jspx_th_c_005fforEach_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f1_reused);
    }
    return false;
  }
}
